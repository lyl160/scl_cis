<?xml version="1.0" encoding="UTF-8"?>
<!-- - Configuration Repository and Service layers -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath*:*.properties" />
	<!-- Web Configuration -->
	<util:properties id="properties" location="classpath:config.properties" />
	<!-- 引入任务调度 -->
	<import resource="applicationContext-task.xml"/>
	<!-- 引入讯飞接口sdk配置 -->
	<import resource="application-context.xml"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="idleConnectionTestPeriod" value="${pool.c3p0.idle_connection_test_period}" />
		<property name="testConnectionOnCheckin" value="${pool.c3p0.test_connection_on_checkin}" />
		<property name="preferredTestQuery" value="${pool.c3p0.preferred_test_query}" />
		<property name="maxIdleTime" value="${pool.c3p0.max_idle_time}" />
		<property name="properties">
			<props>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
				<prop key="c3p0.acquire_increment">${pool.c3p0.acquire_increment}</prop>
				<prop key="c3p0.max_size">${pool.c3p0.max_size}</prop>
				<prop key="c3p0.min_size">${pool.c3p0.min_size}</prop>
			</props>
		</property>
	</bean>

	<!-- Beans -->
	<bean id="dialect" class="cn.dofuntech.core.jdbc.dialect.MySQLDialect" />
	<bean id="cacheManager" class="cn.dofuntech.core.cache.impl.LocalCacheManagerImpl" />
	<bean id="envUtil" class="cn.dofuntech.cis.bean.EnvUtil"></bean>
	<bean id="springContextUtil" class="cn.dofuntech.core.util.spring.SpringContextUtil"></bean>

	<!-- Service -->
	<context:component-scan base-package="cn.dofuntech.*.**.service" />
	<context:component-scan base-package="cn.dofuntech.*.**.queue" />
	<context:component-scan base-package="cn.dofuntech.*.**.bo" />
	<context:component-scan base-package="cn.dofuntech.*.**.init" />
	<context:component-scan base-package="cn.dofuntech.*.**.schedule" />
	<context:component-scan base-package="cn.dofuntech.*.spout" />

	<!-- enable autowire -->
	<context:annotation-config />


	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 事务管理拦截器 Begin 事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*InIsolatedTx" propagation="REQUIRES_NEW" />
			<tx:method name="get*" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" propagation="NOT_SUPPORTED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="cancel*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* cn.dofuntech.*.**.service.impl.*.*(..))" />
	</aop:config>
	<!-- JDBC: JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- JDBC: NamedParameter JdbcTemplate -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- MyBatis: define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/curd/*-mapper.xml</value>
				<value>classpath:mybatis/custom/*-mapper.xml</value>
				<value>classpath:mybatis/dfauth/*.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage"
			value="cn.dofuntech.*.**.domain;cn.dofuntech.*.**.bean" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- MyBatis: scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionTemplateBeanName" value="sqlSession" />
		<property name="basePackage" value="cn.dofuntech.*.**.mapper" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

	<!-- redis配置信息 start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.server}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<constructor-arg index="3" value="60000" type="int" />
		<constructor-arg index="4" value="${redis.password}" />
	</bean>

	<bean id="jedisService" class="cn.dofuntech.tools.redis.JedisService">
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>
	<!-- redis配置信息 end -->
</beans>